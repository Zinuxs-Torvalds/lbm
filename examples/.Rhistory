baseprop*baseprop
BaseGini <- 1+sum(-baseprop*baseprop)
BaseGini
avg_tok_table <-table(avg_tok_len_log)
avg_tok_prop <-avg_tok_table/sum(avg_tok_table)
avg_tok_prop
avg_tok_table <-table(avg_tok_len_log,NewsPop$channel)
avg_tok_tabl
avg_tok_table
avg_tok_table <-table(NewsPop$channel,avg_tok_len_log)
avg_tok_table
avg_tok_prop <-prop.table(avg_tok_table,1)
avg_tok_prop
margin.table(avg_tok_table,1)
margin.table(avg_tok_table,2)
avg_tok_prop <-prop.table(avg_tok_table,2)
avg_tok_prop
avg_tok_prop <-prop.table(avg_tok_table,1)
avg_tok_prop
0.152266+0.5847734
0.4152266+0.5847734
10**2
avg_tok_prop[,1]**2
0.4152266*0.4152266
1+sum(-(avg_tok_prop[,1]**2))
-(avg_tok_prop[,1]**2)
sum(-(avg_tok_prop[,1]**2))
1-(5/6)**2-(2/6)**2
avg_tok_table
avg_tok_prop
avg_tok_prop[,1]
avg_tok_prop[,1]**2
0.3730348**2
-(avg_tok_prop[,1]**2)
sum(-(avg_tok_prop[,1]**2))
1+sum(-(avg_tok_prop[,1]**2))
(5/6)**2-(2/6)**2
1-(5/6)**2-(2/6)**2
sum((avg_tok_prop[,1]**2))
1-sum((avg_tok_prop[,1]**2))
avg_tok_prop
rep('Yes',7)
df <-data.frame(
B = c(rep('Yes',7),rep('No',5)),
C = c(rep('C1',5),rep('C2',2),
'C1',rep('C2',4)))
df
x <-table(df$C,df$B)
x
y <-prop.table(x,1)
u
y
5/6
2/6
y[,1]
y[,2]
sum((y[,2]**2))
1-sum((y[,2]**2))
1-sum((y[,1]**2))
avg_tok_prop[,1]**2
avg_tok_prop[,1]
avg_tok_prop
avg_tok_prop[,1]**2
0.6937226*0.6937226
sum(avg_tok_prop[,1]**2)
sum((y[,1]**2))
y
(y[,1]**2
)
y[,1]**2
0.4**2+0.3**2+0.3**2
0.4**2+0.3**2+0.9**2
prop.table(avg_tok_table,1)
prop.table(avg_tok_table,2)
avg_tok_prop <-prop.table(avg_tok_table,2)
1-sum(avg_tok_prop[,1]**2)
Yes_Node_Gini <- 1-sum(avg_tok_prop[,1]**2)
No_Node_Gini <- 1-sum(avg_tok_prop[,1]**2)
Yes_Node_Gini <- 1-sum(avg_tok_prop[,2]**2)
No_Node_Gini <- 1-sum(avg_tok_prop[,1]**2)
Yes_Node_Gini <- 1-sum(avg_tok_prop[,2]**2)
No_Node_Gini
Yes_Node_Gini
margin.table(avg_tok_table,1)
margin.table(avg_tok_table,2)
margin.table(avg_tok_table,2) * c(No_Node_Gini,Yes_Node_Gini)
prop.table(avg_tok_table,2) * c(No_Node_Gini,Yes_Node_Gini)
prop.table(avg_tok_table,1) * c(No_Node_Gini,Yes_Node_Gini)
prop.table(avg_tok_table,1)
prop.table(avg_tok_len_log)
?prop.table
prop.table(avg_toke_table,2)
prop.table(avg_tok_table,2)
prop.table(avg_tok_table,1)
avg_tok_table
table(avg_tok_len_log)
prop.table(table(avg_tok_len_log),2)
prop.table(table(avg_tok_len_log),1)
table(avg_tok_len_log)/sum(table(avg_tok_len_log))
table(avg_tok_len_log)/sum(table(avg_tok_len_log)) *c(No_Node_Gini,Yes_Node_Gini)
sum(table(avg_tok_len_log)/sum(table(avg_tok_len_log)) *c(No_Node_Gini,Yes_Node_Gini))
BaseGini
gini_process <-function(classes,splitvar){
#Assumes Splitvar is a logical vector
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(base_prob * c(No_Node_Gini,Yes_Node_Gini))
}
gini_process(NewsPop$channel,avg_tok_len_log)
gini_process <-function(classes,splitvar){
#Assumes Splitvar is a logical vector
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
gini_process(NewsPop$channel,avg_tok_len_log)
BaseGini <- 1-sum(baseprop*baseprop)
BaseGini
gini_process(NewsPop$channel,
NewsPop$average_token_length < 2.0)
gini_process(NewsPop$channel,
NewsPop$average_token_length < 5.0)
gini_process(df$C,df$B=='Yes')
gini_process(df$C,df$B=='No')
gini_process(df$C,df$B=='Yes')
?is.null
gini_process <-function(classes,splitvar = NULL){
#Assumes Splitvar is a logical vector
if (is.null(splitvar)){
base_prob <-table(splitvar)/length(splitvar)
return(1-sum(base_prob**2))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
gini_process(df$C)
gini_process <-function(classes,splitvar = NULL){
#Assumes Splitvar is a logical vector
if (is.null(splitvar)){
base_prob <-table(splitvar)/length(splitvar)
cat(base_prob)
return(1-sum(base_prob**2))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
gini_process(df$C)
gini_process <-function(classes,splitvar = NULL){
#Assumes Splitvar is a logical vector
cat(splitvar)
if (is.null(splitvar)){
base_prob <-table(splitvar)/length(splitvar)
cat(base_prob)
return(1-sum(base_prob**2))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
gini_process(df$C)
?cat
gini_process <-function(classes,splitvar = NULL){
#Assumes Splitvar is a logical vector
cat("splitvar")
if (is.null(splitvar)){
base_prob <-table(splitvar)/length(splitvar)
cat(base_prob)
return(1-sum(base_prob**2))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
gini_process(df$C)
gini_process <-function(classes,splitvar = NULL){
#Assumes Splitvar is a logical vector
cat("splitvar")
if (is.null(splitvar)){
cat("Made it here")
base_prob <-table(splitvar)/length(splitvar)
cat(base_prob)
return(1-sum(base_prob**2))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
gini_process(df$C)
gini_process <-function(classes,splitvar = NULL){
#Assumes Splitvar is a logical vector
cat("splitvar")
if (is.null(splitvar)){
cat("Made it here")
base_prob <-table(classes)/length(classes)
cat(base_prob)
return(1-sum(base_prob**2))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
gini_process(df$C)
gini_process <-function(classes,splitvar = NULL){
#Assumes Splitvar is a logical vector
if (is.null(splitvar)){
base_prob <-table(classes)/length(classes)
return(1-sum(base_prob**2))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
gini_process(df$C)
gini_process(df$C,df$B=='No')
gini_process(NewsPop$channel,
NewsPop$average_token_length < 4.7)
gini_process(NewsPop$channel)
gini_process(NewsPop$channel,
NewsPop$average_token_length < 4.7)
gini_process(NewsPop$channel,
NewsPop$average_token_length < 2.0)
gini_process(NewsPop$channel)
gini_process(NewsPop$channel,
NewsPop$average_token_length < 5.0)
gini_process(NewsPop$channel,
NewsPop$average_token_length < 4.7)
gini_process(NewsPop$channel,
NewsPop$average_token_length < 2.0)
gini_process(NewsPop$channel,
NewsPop$average_token_length < 5.0)
gini_process(NewsPop$channel,
ewsPop$num_imgs >= 5.5)
gini_process(NewsPop$channel,
NewsPop$num_imgs >= 5.5)
gini_process(NewsPop$channel,
NewsPop$average_token_length < 4.7)
gini_process(NewsPop$channel,
NewsPop$num_keywords < 6.5)
gini_model<-rpart(fmla,data = NewsPop,
parms = list(split = "gini"),
control = list(minsplit=100))
rpart.plot(gini_model,main="Gini Split Criteria")
info_model<-rpart(fmla,data = NewsPop,
parms = list(split = "information"),
control = list(minsplit=100))
rpart.plot(info_model,main="InfoGain Split Criteria")
gini_process(NewsPop$channel,
NewsPop$average_token_length < 4.5)
gini_process(NewsPop$channel,
NewsPop$average_token_length < 4.7)
summary(gini_model)
gini_process(NewsPop$channel,
NewsPop$average_token_length < 4.713221)
gini_process(NewsPop$channel,
NewsPop$num_imgs >= 5.5)
gini_process(NewsPop$channel,
NewsPop$num_imgs >= 5.5)
gini_process(NewsPop$channel,
NewsPop$num_keywords < 6.5)
gini_process(NewsPop$channel)
?log
info_process <-function(classes,splitvar = NULL){
if (is.null(splitvar)){
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Info <- -sum(crossprob[,1]*log(crossprob[,1],2))
Yes_Node_Info <- -sum(crossprob[,2]*log(crossprob[,2],2))
return(sum(base_prob * c(No_Node_Info,Yes_Node_Info)))
}
info_process(NewsPop$channel,
NewsPop$num_keywords < 6.5)
info_process <-function(classes,splitvar = NULL){
if (is.null(splitvar)){
base_prob <-table(classes)/length(classes)
return(-sum(base_prob*log(base_prob,2)))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Info <- -sum(crossprob[,1]*log(crossprob[,1],2))
Yes_Node_Info <- -sum(crossprob[,2]*log(crossprob[,2],2))
return(sum(base_prob * c(No_Node_Info,Yes_Node_Info)))
}
info_process(NewsPop$channel,
NewsPop$num_keywords < 6.5)
info_process(NewsPop$channel)
table(NewsPop$channel)
info_process(NewsPop$channel)
info_process(NewsPop$channel,
NewsPop$num_keywords < 6.5)
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$num_keywords < 6.5)
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$average_token_length < 4.713221)
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$num_imgs >= 5.5)
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$num_imgs >= 5.5)
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$average_token_length < 4.713221)
1-(1/3)**2-(1/3)**2-(1/3)**2
1-(1/4)**2-(1/4)**2-(1/4)**2-(1/4)**2
1-(1/5)**2-(1/5)**2-(1/5)**2-(1/5)**2-(1/5)**2
1-1/5
gini_process <-function(classes,splitvar = NULL){
#Assumes Splitvar is a logical vector
if (is.null(splitvar)){
base_prob <-table(classes)/length(classes)
return(1-sum(base_prob**2))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Gini <- 1-sum(crossprob[,1]**2)
Yes_Node_Gini <- 1-sum(crossprob[,2]**2)
return(sum(base_prob * c(No_Node_Gini,Yes_Node_Gini)))
}
compress_class<-function(vector){
if(any(vector==1)){
return (min(which(vector==1)))
}
else{
return(0)
}
}
find_top_n <- function(x, n){
sort_order <- order(x,decreasing=T)
return(sort_order[1:n])
}
NewsPop<-read.csv("OnlineNewsPopularity.csv",
header=T)
### Quick look at the data
table(sapply(NewsPop,class))
## Process the Data
weekday_name<-gsub('weekday_is_','',names(NewsPop)[32:38])
weekday_int<-(apply(as.matrix(NewsPop[,32:38]),1,compress_class))
weekday_factor<-factor(weekday_int,
levels = as.character(seq(1,7)),
labels = weekday_name)
NewsPop$weekday <- weekday_factor
drop_names <- names(NewsPop)[32:38]
summary(NewsPop$n_tokens_content)
NewsPop$article_length <- factor(as.numeric(cut(NewsPop$n_tokens_content,
c(0,250,500,716,max(NewsPop$n_tokens_content)))),
levels = seq(1,4), labels = c('short','avg','long',
'very long'))
drop_names <- c(drop_names, 'n_tokens_content')
table(NewsPop$num_videos>0)
NewsPop$has_vid <-factor(as.numeric(NewsPop$num_videos>0),
levels = c(0,1), labels = c('Vid','No Vid'))
drop_names <- c(drop_names, 'num_videos')
### Polarity Ranges
NewsPop$pos_polar_range <- NewsPop$max_positive_polarity - NewsPop$min_positive_polarity
NewsPop$neg_polar_range <- NewsPop$max_negative_polarity - NewsPop$min_negative_polarity
drop_names <- c(drop_names,'max_positive_polarity','min_positive_polarity',
'avg_positive_polarity','max_negative_polarity',
'min_negative_polarity','avg_negative_polarity')
## Create Class Variable
channel_names<-gsub('data_channel_is_','',names(NewsPop)[14:19])
channel_names<-c('unknown',channel_names)
channel_int<-(apply(as.matrix(NewsPop[,14:19]),1,compress_class))
channel_factor<-factor(channel_int,
levels = as.character(seq(0,6)),
labels = channel_names)
NewsPop$channel <- channel_factor
drop_names <- c(drop_names,names(NewsPop)[14:19])
NewsPop$shares <- log(NewsPop$shares+1)
NewsPop$is_weekend <- as.factor(NewsPop$is_weekend)
NewsPop$self_reference_avg_sharess <-log(NewsPop$self_reference_avg_sharess+1)
### Drop unncessary columns
drop_names <- c(drop_names, c('url','timedelta'))
NewsPop <- NewsPop[, !(names(NewsPop) %in% drop_names)]
source("decision-tree-tests.R")
getwd()
setwd("lbm/examples/")
source("decision-tree-tests.R")
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$num_imgs >= 5.5)
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$average_token_length < 4.713221)
gini_process(NewsPop$channel)
data(iris)
gini_process(iris$Species)
library(rpart)
library(rpart.plot)
rpart(Species~.,data=iris)
rpart.plot(rpart(Species~.,data=iris))
gini_process(iris$Species,iris$Petal.Length<2.45)
gini_process(iris$Species,iris$Petal.Length<2.5)
gini_process(iris$Species,iris$Petal.Length<5)
gini_process(iris$Species,iris$Sepal.Length<10)
summary(iris$Sepal.Length)
gini_process(iris$Species,iris$Sepal.Length<6.4)
gini_process(iris$Species) #
gini_process(iris$Species,iris$Petal.Length<2.45)
gini_process(iris$Species,iris$Petal.Length<5)
gini_process(iris$Species,iris$Sepal.Length<6.4) #
info_process(iris$Species) #0.6667
info_process(iris$Species,iris$Petal.Length<2.45) #0.3333
info_process(iris$Species,iris$Petal.Length<5) #0.4086
info_process(iris$Species,iris$Sepal.Length<6.4) #0.5578
info_process(iris$Species) #0.6667
info_process(iris$Species,iris$Petal.Length<2.45) #0.3333
info_process(iris$Species,iris$Petal.Length<5) #0.4086
info_process(iris$Species,iris$Sepal.Length<6.4) #0.5578
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$num_imgs >= 5.5)
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$average_token_length < 4.713221)
rpart.plot(info_model,main="InfoGain Split Criteria")
info_model<-rpart(fmla,data = NewsPop,
parms = list(split = "information"),
control = list(minsplit=100))
rpart.plot(info_model,main="InfoGain Split Criteria")
fmla <- channel~n_tokens_title+n_unique_tokens+n_non_stop_unique_tokens+
num_hrefs+num_self_hrefs+num_imgs+average_token_length+
num_keywords+self_reference_avg_sharess
info_model<-rpart(fmla,data = NewsPop,
parms = list(split = "information"),
control = list(minsplit=100))
rpart.plot(info_model,main="InfoGain Split Criteria")
summary(info_model)
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$num_imgs >= 5.5)
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$average_token_length < 4.713221)
info_process(NewsPop$channel)
info_process(NewsPop$channel,
NewsPop$average_token_length < 4.713221)
info_process(iris$Species,iris$Petal.Length<2.45) #0.3333
iris$Petal.Length<2.45
info_process(iris$Species) #0.6667
splitvar<-iris$Petal.Length<2.45
base_prob <-table(splitvar)/length(splitvar)
base_prob
classes <- iris$Species
classes <- iris$Species
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Node_Info <- -sum(crossprob[,1]*log(crossprob[,1],2))
crosstab
crossprob <- prop.table(crosstab,2)
crossprob
No_Node_Info <- -sum(crossprob[,1]*log(crossprob[,1],2))
No_Node_Info
log(crossprob[,1],2)
crossprob[,1]
No_Col <- crossprob[crossprob[,1]>0,1]
No_Col
info_process <-function(classes,splitvar = NULL){
if (is.null(splitvar)){
base_prob <-table(classes)/length(classes)
return(-sum(base_prob*log(base_prob,2)))
}
base_prob <-table(splitvar)/length(splitvar)
crosstab <- table(classes,splitvar)
crossprob <- prop.table(crosstab,2)
No_Col <- crossprob[crossprob[,1]>0,1]
Yes_Col <- crossprob[crossprob[,2]>0,2]
No_Node_Info <- -sum(No_Col*log(No_Col,2))
Yes_Node_Info <- -sum(Yes_Col*log(Yes_Col,2))
return(sum(base_prob * c(No_Node_Info,Yes_Node_Info)))
}
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$average_token_length < 4.713221)
info_process(NewsPop$channel) - info_process(NewsPop$channel,
NewsPop$num_imgs >= 5.5)
info_process(iris$Species) #0.6667
info_process(iris$Species,iris$Petal.Length<2.45) #0.3333
info_process(iris$Species,iris$Petal.Length<5) #0.4086
info_process(iris$Species,iris$Sepal.Length<6.4) #0.5578
info_process(iris$Species)
info_process(iris$Species,iris$Petal.Length<2.45) #
info_process(iris$Species,iris$Petal.Length<5) #
info_process(iris$Species,iris$Sepal.Length<6.4) #
?rpart
rpart(Species~.,data=iris,method=list(split="information")))
rpart(Species~.,data=iris,method=list(split="information"))
rpart(Species~.,data=iris)
rpart(Species~.,data=iris,parms=list(split="information"))
